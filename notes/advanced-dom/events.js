/***
 * an event is a signal generated by a certain dom node
 * eventlisteners let us handle those events
 */

const h1 = document.querySelector('h1');

const alertH1 = function(e){ // like the hover event in css
    alert('in the h1');
    h1.removeEventListener('mouseenter', 'alertH1');
};

h1.addEventListener('mouseenter', alertH1);

// can have multiple event listeners on the same element, they will just chain

// can also remove event listeners as long as they are named
// can also write into html <h1 onclick="alert('HTML')"></h1> but don't really use this any more

// bubbling

/***
 * say have link within para within section within body
 * click the link
 * the event is actually generated at the root of the document
 * the event travels down the tree all the way down to the anchor element (this is called the capturing phase)
 * when the event reaches the target the target phase begins where the callback function is triggered
 * after reaching the target the event travels all the way back up from the target to the document root - this is the bubbling phase
 * it will trigger any other function on its way
 * this allows us to implement really powerful patterns
 * events can only really be handled in the target and bubbling phases but can sort of structure an eventlistener so that it happens in the capturing phase
 * not ALL events have a capturing and bubbling phase, only handled at target
 * events "propagate" - this means they capture and bubble
 * 
 * in event listeners the THIS applies to the element that the listener is ATTACHED TO, not necessarily the target that was actually clicked
 * e.target is where the event first happened, not necessarily the same as the element on which the target is attached
 * so if an element has a child and the child was clicked, the target will be the same in both the child and parent event handlers, both events are triggered but there was only one target
 * also have e.currentTarget which is the same as this, the event on which the handler was attached
 * 
 * so if you have a handler on an element with children even if you don't have events on the children the children could still be the target depending on where exactly the user clicks
 * that's why THIS is so useful, or e.currentTarget
 * 
 * can do e.stopPropagation(); to stop the bubbling from happening, handlers will only be triggered on EXACTLY what you clicked - be wary of this....
 * 
 * after the eventListener function can add a parameter of true which will make the event listen to capture rather than bubbling phase, useful for event delegation, so event listeners will be triggered in reverse order (document root first etc.)
 * 
 */

